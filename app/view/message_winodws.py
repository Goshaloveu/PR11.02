from qfluentwidgets import MessageBoxBase, SubtitleLabel, LineEdit, PushButton, CaptionLabel
from PySide6.QtCore import Qt
from PySide6.QtWidgets import (QListWidgetItem, QFrame, QTreeWidgetItem, QHBoxLayout,
                             QTreeWidgetItemIterator, QTableWidgetItem)
from qfluentwidgets import TreeWidget, TableWidget, ListWidget, HorizontalFlipView, TitleLabel
from .gallery_interface import GalleryInterface
from ..common.translator import Translator
from ..common.style_sheet import StyleSheet
from PySide6 import QtWidgets

from PySide6.QtCore import Qt, QUrl, QEvent, QDate, QTime
from PySide6.QtGui import QDesktopServices, QPainter, QPen, QColor
from PySide6.QtWidgets import QWidget, QLabel, QVBoxLayout, QHBoxLayout, QFrame

from qfluentwidgets import (ScrollArea, PushButton, ToolButton, FluentIcon,
                            isDarkTheme, IconWidget, Theme, ToolTipFilter, TitleLabel, CaptionLabel,
                            StrongBodyLabel, BodyLabel, TimePicker, CalendarPicker, ComboBox, TextEdit, toggleTheme)
from ..common.config import cfg, FEEDBACK_URL, HELP_URL, EXAMPLE_URL
from ..common.icon import Icon
from ..common.style_sheet import StyleSheet
from ..common.signal_bus import signalBus
import db.requests as rq
import re
from datetime import date
import pymorphy2

morph = pymorphy2.MorphAnalyzer()


class AddMessageBoxPassengers(MessageBoxBase):
    """ Custom message box """

    def __init__(self, parent=None):
        super().__init__(parent)
        self.titleLabel = SubtitleLabel('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö', self)
        
        self.verticalLayout = QVBoxLayout(self)
        self.verticalLayout.setObjectName("verticalLayout")
        
        self.firstH = QHBoxLayout(self)
        self.firstH.setObjectName("1_HorizontalLayout")
        self.NameEdit = LineEdit(self)
        self.NameEdit.setPlaceholderText('–ò–º—è')
        self.NameEdit.setClearButtonEnabled(True)
        self.firstH.addWidget(self.NameEdit)
        
        self.LastEdit = LineEdit(self)
        self.LastEdit.setPlaceholderText('–§–∞–º–∏–ª–∏—è')
        self.LastEdit.setClearButtonEnabled(True)
        self.firstH.addWidget(self.LastEdit)
        
        self.MiddleEdit = LineEdit(self)
        self.MiddleEdit.setPlaceholderText('–û—Ç—á–µ—Å—Ç–≤–æ')
        self.MiddleEdit.setClearButtonEnabled(True)
        self.firstH.addWidget(self.MiddleEdit)
        
        self.secondH = QHBoxLayout(self)
        self.secondH.setObjectName("2_HorizontalLayout")
        self.pass_series = LineEdit(self)
        self.pass_series.setPlaceholderText('–°–µ—Ä–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞')
        self.pass_series.setClearButtonEnabled(True)
        self.secondH.addWidget(self.pass_series)
        
        self.pass_number = LineEdit(self)
        self.pass_number.setPlaceholderText('–ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞')
        self.pass_number.setClearButtonEnabled(True)
        self.secondH.addWidget(self.pass_number)
        
        self.gender = ComboBox(self)
        self.gender.addItems(["m", "f"])
        self.secondH.addWidget(self.gender)
        
        self.thirdH = QHBoxLayout(self)
        self.thirdH.setObjectName("3_HorizontalLayout")
        self.mail = LineEdit(self)
        self.mail.setPlaceholderText('–ü–æ—á—Ç–∞')
        self.mail.setClearButtonEnabled(True)
        self.thirdH.addWidget(self.mail)
        
        self.number = LineEdit(self)
        self.number.setPlaceholderText('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
        self.number.setClearButtonEnabled(True)
        self.thirdH.addWidget(self.number)
        
        self.fourthH = QHBoxLayout(self)
        self.fourthH.setObjectName("4_HorizontalLayout")
        self.date = CalendarPicker(self)
        self.date.setText("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è")
        self.fourthH.addWidget(self.date)
        
        self.address = LineEdit(self)
        self.address.setPlaceholderText("–ê–¥—Ä–µ—Å –º–µ—Å—Ç–∞ –∂–∏—Ç–µ–ª—å—Å—Ç–≤–∞")
        self.address.setClearButtonEnabled(True)
        self.fourthH.addWidget(self.address)
        

        self.warningLabelpass = CaptionLabel("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Å–ø–æ—Ä—Ç–∞")
        self.warningLabelpass.setTextColor("#cf1010", QColor(255, 28, 32))
        self.warningLabelmail = CaptionLabel("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ—á—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å")
        self.warningLabelmail.setTextColor("#cf1010", QColor(255, 28, 32))
        self.warningLabelfio = CaptionLabel("–§–ò–û –º–æ–∂–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –ª–∞—Ç–∏–Ω–∏—Ü—ã –∏ –∫–∏—Ä–∏–ª–∏—Ü—ã –∏ –∑–Ω–∞–∫–∞ -")
        self.warningLabelfio.setTextColor("#cf1010", QColor(255, 28, 32))
        self.warningLabelnumber = CaptionLabel("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –Ω–∞ 8 –∏–ª–∏ +7 –∏ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 11 —Ü–∏—Ñ—Ä")
        self.warningLabelnumber.setTextColor("#cf1010", QColor(255, 28, 32))
        self.warningLabelNull = CaptionLabel("–ü–æ–ª—è —Ñ–æ—Ä–º—ã –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏!")
        self.warningLabelNull.setTextColor("#cf1010", QColor(255, 28, 32))

        # add widget to view layout
        self.verticalLayout.addWidget(self.titleLabel)
        self.verticalLayout.addLayout(self.firstH)
        self.verticalLayout.addLayout(self.secondH)
        self.verticalLayout.addLayout(self.thirdH)
        self.verticalLayout.addLayout(self.fourthH)
        
        
        self.viewLayout.addLayout(self.verticalLayout)
        self.viewLayout.addWidget(self.warningLabelNull)
        self.warningLabelNull.hide()
        self.viewLayout.addWidget(self.warningLabelpass)
        self.warningLabelpass.hide()
        self.viewLayout.addWidget(self.warningLabelmail)
        self.warningLabelmail.hide()
        self.viewLayout.addWidget(self.warningLabelnumber)
        self.warningLabelnumber.hide()
        self.viewLayout.addWidget(self.warningLabelfio)
        self.warningLabelfio.hide()

        # change the text of button
        self.yesButton.setText('–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ')

        self.widget.setMinimumWidth(350)

        # self.hideYesButton()

    def validate(self):
        """ Rewrite the virtual method """
        isPassSeriesValid = re.fullmatch(r"\d{4}", self.pass_series.text())
        isPassNumberValid = re.fullmatch(r"\d{6}", self.pass_number.text())
        isValidMail =  bool(re.fullmatch(r"\w+@\w+\.\w+", self.mail.text(), re.IGNORECASE))
        comp = re.compile("^[a-zA-Z–∞-—è–ê-–Ø—ë–Å-]*$")
        isValidName = bool(comp.fullmatch(self.NameEdit.text()))
        isValidLast = bool(comp.fullmatch(self.LastEdit.text()))
        isValidMiddle = bool(comp.fullmatch(self.MiddleEdit.text()))
        isValidNumber = bool(re.fullmatch(r"^(?:\+7|8)\d{10}$", self.number.text()))
        
        
        
        
        nullable = not bool([i for i in filter(lambda x: len(x) == 0, [self.pass_series.text(), self.pass_number.text(), self.mail.text(), self.NameEdit.text(),
                                                                            self.LastEdit.text(), self.MiddleEdit.text(), self.number.text(), self.address.text(),
                                                                            self.date.date.toString(Qt.DateFormat.ISODate)])])
        self.warningLabelNull.setHidden(nullable)
        self.warningLabelpass.setHidden(bool(isPassNumberValid and isPassSeriesValid))
        self.warningLabelmail.setHidden(bool(isValidMail))
        self.warningLabelfio.setHidden(bool(isValidName and isValidLast and isValidMiddle))
        self.warningLabelnumber.setHidden(bool(isValidNumber))
        
        isValid = isPassNumberValid and isPassSeriesValid and isValidMail and isValidName and isValidLast and isValidMiddle and isValidNumber and nullable
        
        return isValid


class AddMessageBoxTask(MessageBoxBase):
    """ Custom message box """

    def __init__(self, user, parent=None):
        super().__init__(parent)
        self.user = user
        self.titleLabel = SubtitleLabel('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è', self)
        
        self.verticalLayout = QVBoxLayout(self)
        self.verticalLayout.setObjectName("verticalLayout")

        name, last = morph.parse(self.user.first)[0].inflect({'gent'}).word, morph.parse(self.user.last)[0].inflect({'gent'}).word
        self.label = BodyLabel(f"–ó–∞–¥–∞–Ω–∏–µ –æ—Ç {str.capitalize(name)} {str.capitalize(last)}", self)
        self.firstH = QHBoxLayout(self)
        self.firstH.setObjectName("1_HorizontalLayout")
        self.TitleEdit = LineEdit(self)
        self.TitleEdit.setMaxLength(30)
        self.TitleEdit.setPlaceholderText('–ó–∞–≥–æ–ª–æ–≤–æ–∫')
        self.TitleEdit.setClearButtonEnabled(True)
        self.firstH.addWidget(self.TitleEdit)
        
        self.secondH = QHBoxLayout(self)
        self.secondH.setObjectName("2_HorizontalLayout")
        self.TextEdit = TextEdit(self)
        self.TextEdit.setPlaceholderText('–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ . . .')
        self.TextEdit.setMarkdown(
            "## –°–¥–µ–ª–∞–π—Ç–µ –¥–ª—è –º–µ–Ω—è –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–µ: \n * –ù–∞–π–¥–∏—Ç–µ –º–Ω–µ –µ–¥–∏–Ω–æ—Ä–æ–≥–∞ ü¶Ñ \n * –ü–æ–¥–∞—Ä–∏—Ç–µ –º–Ω–µ –ª–æ—à–∞–¥—å üê¥ ")
        self.TextEdit.setMinimumSize(500, 150)
        self.secondH.addWidget(self.TextEdit)

        self.warningLabelNull = CaptionLabel("–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–æ—Ä–º—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
        self.warningLabelNull.setTextColor("#cf1010", QColor(255, 28, 32))

        # add widget to view layout
        self.verticalLayout.addWidget(self.titleLabel)
        self.verticalLayout.addWidget(self.label)
        self.verticalLayout.addLayout(self.firstH)
        self.verticalLayout.addLayout(self.secondH)
        
        
        self.viewLayout.addLayout(self.verticalLayout)
        self.viewLayout.addWidget(self.warningLabelNull)
        self.warningLabelNull.hide()
        
        # change the text of button
        self.yesButton.setText('–î–æ–±–∞–≤–∏—Ç—å')
        self.cancelButton.setText('–û—Ç–º–µ–Ω–∞')

        self.widget.setMinimumWidth(350)

        # self.hideYesButton()

    def validate(self):
        """ Rewrite the virtual method """
        nullable = bool(self.TitleEdit.text())
        self.warningLabelNull.setHidden(nullable)
        isValid = nullable
        
        return isValid


class UpdateMessageBoxApp(MessageBoxBase):
    def __init__(self, user, parent=None):
        super(UpdateMessageBoxApp, self).__init__(parent)
        self.user = user
        self.titleLabel = SubtitleLabel('–ó–∞–¥–∞–Ω–∏–µ', self)
        
        self.verticalLayout = QVBoxLayout(self)
        self.verticalLayout.setObjectName("verticalLayout")

        self.firstH = QHBoxLayout(self)
        self.firstH.setObjectName("1_HorizontalLayout")
        self.TitleEdit = LineEdit(self)
        self.TitleEdit.setMaxLength(30)
        self.TitleEdit.setPlaceholderText('–ó–∞–≥–æ–ª–æ–≤–æ–∫')
        self.TitleEdit.setText(self.user.title)
        self.TitleEdit.setClearButtonEnabled(True)
        self.firstH.addWidget(self.TitleEdit)
        
        self.secondH = QHBoxLayout(self)
        self.secondH.setObjectName("2_HorizontalLayout")
        self.TextEdit = TextEdit(self)
        self.TextEdit.setPlaceholderText('–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ . . .')
        self.TextEdit.setText(self.user.text)
        self.TextEdit.setMinimumSize(500, 150)
        self.secondH.addWidget(self.TextEdit)

        self.warningLabelNull = CaptionLabel("–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–æ—Ä–º—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
        self.warningLabelNull.setTextColor("#cf1010", QColor(255, 28, 32))

        # add widget to view layout
        self.verticalLayout.addWidget(self.titleLabel)
        self.verticalLayout.addLayout(self.firstH)
        self.verticalLayout.addLayout(self.secondH)
        
        
        self.viewLayout.addLayout(self.verticalLayout)
        self.viewLayout.addWidget(self.warningLabelNull)
        self.warningLabelNull.hide()
        
        # change the text of button
        if self.user.status == "–í —Ä–∞–±–æ—Ç–µ":
            self.yesButton.setText('–û–±–Ω–æ–≤–∏—Ç—å')
            self.cancelButton.setText('–û—Ç–º–µ–Ω–∞')
        else:
            self.TitleEdit.setEnabled(False)
            self.TextEdit.setEnabled(False)
            self.cancelButton.setText('–û–∫')
            self.yesButton.hide()

        self.widget.setMinimumWidth(350)

        # self.hideYesButton()

    def validate(self):
        """ Rewrite the virtual method """
        nullable = bool(self.TitleEdit.text())
        self.warningLabelNull.setHidden(nullable)
        isValid = nullable
        
        return isValid
        
class CheckMessageBoxApp(MessageBoxBase):
    def __init__(self, user, parent=None):
        super(CheckMessageBoxApp, self).__init__(parent)
        self.user = user
        self.titleLabel = SubtitleLabel('–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∑–∞–¥–∞–Ω–∏–∏', self)
        
        self.verticalLayout = QVBoxLayout(self)
        self.verticalLayout.setObjectName("verticalLayout")

        self.firstH = QHBoxLayout(self)
        self.firstH.setObjectName("1_HorizontalLayout")
        self.TitleEdit = LineEdit(self)
        self.TitleEdit.setMaxLength(30)
        self.TitleEdit.setText(self.user.title)
        self.TitleEdit.setEnabled(False)
        self.firstH.addWidget(self.TitleEdit)
        
        self.secondH = QHBoxLayout(self)
        self.secondH.setObjectName("2_HorizontalLayout")
        self.TextEdit = TextEdit(self)
        self.TextEdit.setText(self.user.text)
        self.TextEdit.setEnabled(False)
        self.TextEdit.setMinimumSize(500, 150)
        self.secondH.addWidget(self.TextEdit)

        # add widget to view layout
        self.verticalLayout.addWidget(self.titleLabel)
        self.verticalLayout.addLayout(self.firstH)
        self.verticalLayout.addLayout(self.secondH)
        
        
        self.viewLayout.addLayout(self.verticalLayout)
        
        # change the text of button
        if self.user.status == "–í —Ä–∞–±–æ—Ç–µ":
            self.yesButton.setText('–í—ã–ø–æ–ª–Ω–∏—Ç—å')
            self.cancelButton.setText('–û—Ç–º–µ–Ω–∞')
        else:
            self.yesButton.setText('–û–∫')
            self.cancelButton.hide()

        self.widget.setMinimumWidth(350)
    
    
# class UpdateMessageBoxPassengers(AddMessageBoxPassengers):
#     """ Custom message box """

#     def __init__(self, row_data, parent=None):
#         super(UpdateMessageBoxPassengers, self).__init__(parent)
        
#         self.id = row_data[0]
#         self.NameEdit.setText(row_data[1])
#         self.LastEdit.setText(row_data[2])
#         self.MiddleEdit.setText(row_data[3])
#         self.pass_series.setText(str(row_data[4]))
#         self.pass_number.setText(str(row_data[5]))
#         self.mail.setText(row_data[6])
#         self.date.setDate(QDate.fromString(row_data[7], "yyyy-MM-dd"))
#         self.address.setText(row_data[8])
#         self.number.setText(str(row_data[9]))
#         self.gender.setCurrentIndex(0 if row_data[10] == "m" else 1)
        
#         self.yesButton.setText('–û–±–Ω–æ–≤–∏—Ç—å')
#         self.titleLabel.setText("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")


class AddMessageBoxFlight(MessageBoxBase):
    """ Custom message box """

    def __init__(self, parent=None):
        super().__init__(parent)
        self.titleLabel = SubtitleLabel('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö', self)
        
        self.verticalLayout = QVBoxLayout(self)
        self.verticalLayout.setObjectName("verticalLayout")
        
        self.firstH = QHBoxLayout(self)
        self.firstH.setObjectName("1_HorizontalLayout")
        
        self.category = ComboBox(self)
        self.category.addItems(["A", "B", "C"])
        self.firstH.addWidget(self.category)
        
        self.numberEdit = LineEdit(self)
        self.numberEdit.setPlaceholderText('–ù–æ–º–µ—Ä')
        self.numberEdit.setClearButtonEnabled(True)
        self.numberEdit.setMaxLength(3)
        self.firstH.addWidget(self.numberEdit)
        
        self.status = ComboBox(self)
        self.status.addItems(["fly", "end", "start"])
        self.firstH.addWidget(self.status)
        
        self.secondH = QHBoxLayout(self)
        self.secondH.setObjectName("2_HorizontalLayout")
        
        self.FromEdit = LineEdit(self)
        self.FromEdit.setPlaceholderText('–û—Ç–∫—É–¥–∞')
        self.FromEdit.setClearButtonEnabled(True)
        self.secondH.addWidget(self.FromEdit)
        
        self.DirectEdit = LineEdit(self)
        self.DirectEdit.setPlaceholderText('–ö—É–¥–∞')
        self.DirectEdit.setClearButtonEnabled(True)
        self.secondH.addWidget(self.DirectEdit)
        
        self.thirdH = QHBoxLayout(self)
        self.thirdH.setObjectName("3_HorizontalLayout")
        
        self.date = CalendarPicker(self)
        self.date.setText("–î–∞—Ç–∞ –≤—ã–ª–µ—Ç–∞")
        self.thirdH.addWidget(self.date)
        
        self.fourthH = QVBoxLayout(self)
        self.fourthH.setObjectName("4_VerticalLayout")
        
        self.timeLabel = BodyLabel('–í—Ä–µ–º—è –≤—ã–ª–µ—Ç–∞', self)
        self.fourthH.addWidget(self.timeLabel)
        
        self.time = TimePicker(self)
        self.fourthH.addWidget(self.time)
        self.thirdH.addLayout(self.fourthH)
        

        self.warningLabelDirect = CaptionLabel("–ü—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–≤–µ–Ω –ø—É–Ω–∫—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        self.warningLabelDirect.setTextColor("#cf1010", QColor(255, 28, 32))

        # add widget to view layout
        self.verticalLayout.addWidget(self.titleLabel)
        self.verticalLayout.addLayout(self.firstH)
        self.verticalLayout.addLayout(self.secondH)
        self.verticalLayout.addLayout(self.thirdH)
        
        
        self.viewLayout.addLayout(self.verticalLayout)
        self.viewLayout.addWidget(self.warningLabelDirect)
        self.warningLabelDirect.hide()

        # change the text of button
        self.yesButton.setText('–î–æ–±–∞–≤–∏—Ç—å')
        self.cancelButton.setText('–û—Ç–º–µ–Ω–∞')

        self.widget.setMinimumWidth(350)

        # self.hideYesButton()

    def validate(self):
        """ Rewrite the virtual method """
        
        isDirectValid = self.DirectEdit.text() != self.FromEdit.text()
        self.warningLabelDirect.setHidden(isDirectValid)
        
        return isDirectValid


class UpdateMessageBoxFlight(AddMessageBoxFlight):
    """ Custom message box """

    def __init__(self, row_data, parent=None):
        super(UpdateMessageBoxFlight, self).__init__(parent)
        
        cat = row_data[1][0]
        ser = row_data[1][1:]
        
        self.category.setCurrentIndex(["A", "B", "C"].index(cat))
        self.numberEdit.setText(ser)
        self.status.setCurrentIndex(["fly", "end", "start"].index(row_data[-1]))
        self.FromEdit.setText(row_data[2])
        self.DirectEdit.setText(row_data[3])
        self.date.setDate(QDate.fromString(row_data[4], "yyyy-MM-dd"))
        self.time.setTime(QTime.fromString(row_data[5], "hh:mm:ss"))
        
        self.yesButton.setText('–û–±–Ω–æ–≤–∏—Ç—å')
        self.titleLabel.setText("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")
        
        
class AddMessageBoxTicket(MessageBoxBase):
    """ Custom message box """

    def __init__(self, data, parent=None):
        super(AddMessageBoxTicket, self).__init__(parent)
        self.titleLabel = SubtitleLabel('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö', self)
        
        self.reis = {i["flight"].number: i["flight"].id for i in data}
        self.reis_set = set(self.reis.keys())
        self.passengers = set([str(i.id) for i in rq.get_table("passengers")])
        print(self.passengers)
        
        self.verticalLayout = QVBoxLayout(self)
        self.verticalLayout.setObjectName("verticalLayout")
        
        self.firstH = QHBoxLayout(self)
        self.firstH.setObjectName("1_HorizontalLayout")
        
        self.category = ComboBox(self)
        self.category.addItems(["A", "B", "C"])
        self.firstH.addWidget(self.category)
        
        self.numberEdit = LineEdit(self)
        self.numberEdit.setPlaceholderText('–ù–æ–º–µ—Ä —Ä–µ–π—Å–∞')
        self.numberEdit.setClearButtonEnabled(True)
        self.numberEdit.setMaxLength(3)
        self.firstH.addWidget(self.numberEdit)
        
        self.status = ComboBox(self)
        self.status.addItems(["available", "sold", "expired"])
        self.firstH.addWidget(self.status)
        
        self.secondH = QHBoxLayout(self)
        self.secondH.setObjectName("2_HorizontalLayout")
        
        self.FromEdit = LineEdit(self)
        self.FromEdit.setPlaceholderText('–ù–æ–º–µ—Ä –ø–∞—Å—Å–∞–∂–∏—Ä–∞')
        self.FromEdit.setClearButtonEnabled(True)
        self.secondH.addWidget(self.FromEdit)
        
        self.PlaceEdit = LineEdit(self)
        self.PlaceEdit.setPlaceholderText('–ù–æ–º–µ—Ä –º–µ—Å—Ç–∞ –≤ —Å–∞–º–æ–ª–µ—Ç–µ')
        self.PlaceEdit.setClearButtonEnabled(True)
        self.secondH.addWidget(self.PlaceEdit)
        
        self.thirdH = QHBoxLayout(self)
        self.thirdH.setObjectName("3_HorizontalLayout")
        
        self.date = CalendarPicker(self)
        self.date.setText("–î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏")
        self.thirdH.addWidget(self.date)
        
        self.fourthH = QVBoxLayout(self)
        self.fourthH.setObjectName("4_VerticalLayout")
        
        self.timeLabel = BodyLabel('–í—Ä–µ–º—è –ø–æ–∫—É–ø–∫–∏', self)
        self.fourthH.addWidget(self.timeLabel)
        
        self.time = TimePicker(self)
        self.fourthH.addWidget(self.time)
        self.thirdH.addLayout(self.fourthH)
        

        self.warningLabelPassenger = CaptionLabel("–ü–∞—Å—Å–∞–∂–∏—Ä–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        self.warningLabelFlight = CaptionLabel("–†–µ–π—Å–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        self.warningLabelPassenger.setTextColor("#cf1010", QColor(255, 28, 32))
        self.warningLabelFlight.setTextColor("#cf1010", QColor(255, 28, 32))
        self.warningLabelNull = CaptionLabel("–ü–æ–ª—è —Ä–µ–π—Å–∞, –º–µ—Å—Ç–∞ –∏ —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏!")
        self.warningLabelNull.setTextColor("#cf1010", QColor(255, 28, 32))
        self.warningLabelOp = CaptionLabel("–¢–∞–∫–æ–π –±–∏–ª–µ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        self.warningLabelOp.setTextColor("#cf1010", QColor(255, 28, 32))

        # add widget to view layout
        self.verticalLayout.addWidget(self.titleLabel)
        self.verticalLayout.addLayout(self.firstH)
        self.verticalLayout.addLayout(self.secondH)
        self.verticalLayout.addLayout(self.thirdH)
        
        
        self.viewLayout.addLayout(self.verticalLayout)
        self.viewLayout.addWidget(self.warningLabelPassenger)
        self.warningLabelPassenger.hide()
        self.viewLayout.addWidget(self.warningLabelFlight)
        self.warningLabelFlight.hide()
        self.viewLayout.addWidget(self.warningLabelNull)
        self.warningLabelNull.hide()
        self.viewLayout.addWidget(self.warningLabelOp)
        self.warningLabelOp.hide()

        # change the text of button
        self.yesButton.setText('–î–æ–±–∞–≤–∏—Ç—å')
        self.cancelButton.setText('–û—Ç–º–µ–Ω–∞')

        self.widget.setMinimumWidth(350)

        # self.hideYesButton()

    def validate(self):
        """ Rewrite the virtual method """
        
        isPassengerValid = True
        
        if self.FromEdit.text():
            isPassengerValid = self.FromEdit.text() in self.passengers
            self.warningLabelPassenger.setHidden(isPassengerValid)

        isFlightValid = (self.category.text() + self.numberEdit.text()) in self.reis_set
        self.warningLabelFlight.setHidden(isFlightValid)
        
        nullable = not bool([i for i in filter(lambda x: len(x) == 0, [self.numberEdit.text(), self.PlaceEdit.text()])])

        self.warningLabelNull.setHidden(nullable)
        
        isExist = not rq.check_ticket(self.reis[self.category.text() + self.numberEdit.text()], self.PlaceEdit.text())
        # ex = rq.a_check_ticket(self.reis[self.category.text() + self.numberEdit.text()], self.PlaceEdit.text())
        # print(ex.__dict__)
        # print(self.category.text() + self.numberEdit.text(), self.reis[self.category.text() + self.numberEdit.text()])
        self.warningLabelOp.setHidden(isExist)
        
        isValid = isPassengerValid and isFlightValid and nullable and isExist
        
        return isValid


class UpdateMessageBoxTicket(AddMessageBoxTicket):
    """ Custom message box """

    def __init__(self, data, row_data, parent=None):
        super(UpdateMessageBoxTicket, self).__init__(data, parent)
        
        row_data = [i if i != "None" else None for i in row_data]
        cat = row_data[1][0]
        ser = row_data[1][1:]
        
        self.category.setCurrentIndex(["A", "B", "C"].index(cat))
        self.numberEdit.setText(ser)
        self.status.setCurrentIndex(["available", "sold", "expired"].index(row_data[-1]))
        self.FromEdit.setText(row_data[3])
        self.PlaceEdit.setText(row_data[2])
        if row_data[4]:
            self.date.setDate(QDate.fromString(row_data[4].split(" ")[0], "yyyy-MM-dd"))
            self.time.setTime(QTime.fromString(row_data[4].split(" ")[1], "hh:mm:ss"))
        
        self.numberEdit.setReadOnly(True)
        self.numberEdit.setClearButtonEnabled(False)
        self.PlaceEdit.setReadOnly(True)
        self.PlaceEdit.setClearButtonEnabled(False)
        self.category.setEnabled(False)
        
        self.yesButton.setText('–û–±–Ω–æ–≤–∏—Ç—å')
        self.titleLabel.setText("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")
    
    def validate(self):
        """ Rewrite the virtual method """
        
        isPassengerValid = True
        
        if self.FromEdit.text():
            isPassengerValid = self.FromEdit.text() in self.passengers
            self.warningLabelPassenger.setHidden(isPassengerValid)

        isFlightValid = (self.category.text() + self.numberEdit.text()) in self.reis_set
        self.warningLabelFlight.setHidden(isFlightValid)
        
        nullable = not bool([i for i in filter(lambda x: len(x) == 0, [self.numberEdit.text(), self.PlaceEdit.text()])])

        self.warningLabelNull.setHidden(nullable)
        
        # isExist = not rq.check_ticket(self.reis[self.category.text() + self.numberEdit.text()], self.PlaceEdit.text())
        # ex = rq.a_check_ticket(self.reis[self.category.text() + self.numberEdit.text()], self.PlaceEdit.text())
        # print(ex.__dict__)
        # print(self.category.text() + self.numberEdit.text(), self.reis[self.category.text() + self.numberEdit.text()])
        # self.warningLabelOp.setHidden(isExist)
        
        isValid = isPassengerValid and isFlightValid and nullable \
                                    # and isExist
        
        return isValid